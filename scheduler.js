const cron = require("node-cron");
const fs = require("fs");
const { MezonClient } = require("mezon-sdk");
require("dotenv").config();

const client = new MezonClient(process.env.APPLICATION_TOKEN);

// üëâ ƒêƒÉng nh·∫≠p Mezon
client.login().then(() => {
  console.log("üü¢ Scheduler ƒëang ch·∫°y...");

  // üîÅ M·ªói ph√∫t ki·ªÉm tra reminders
  cron.schedule("* * * * *", async () => {
    const now = new Date();
    const currentTime = now.toTimeString().slice(0, 5); // "HH:mm"

    let reminders = [];
    try {
      const raw = fs.readFileSync("./reminders.json", "utf-8");
      reminders = JSON.parse(raw);
    } catch (e) {
      reminders = [];
    }

    const updatedReminders = [];

    for (const r of reminders) {
      if (r.time === currentTime) {
        try {
          const channel = await client.channels.fetch(r.channel_id);
          await channel.send({
            t: `üîî ƒê·∫øn gi·ªù h·ªçc **${r.subject.toUpperCase()}** nh∆∞ b·∫°n ƒë√£ ƒë·∫∑t l√∫c ${r.time}!`
          });
          console.log(`‚úÖ ƒê√£ nh·∫Øc l·ªãch: ${r.subject} - ${r.time}`);
          // ‚ùå Kh√¥ng th√™m v√†o updatedReminders => nh·∫Øc xong th√¨ x√≥a
        } catch (err) {
          console.error("‚ö†Ô∏è G·ª≠i nh·∫Øc th·∫•t b·∫°i:", err);
          updatedReminders.push(r); // ‚ùó G·ª≠i l·ªói th√¨ gi·ªØ l·∫°i
        }
      } else {
        updatedReminders.push(r); // ‚è≥ Ch∆∞a ƒë·∫øn gi·ªù th√¨ gi·ªØ l·∫°i
      }
    }

    // ‚úçÔ∏è Ghi l·∫°i file reminders.json v·ªõi danh s√°ch m·ªõi
    try {
      fs.writeFileSync("./reminders.json", JSON.stringify(updatedReminders, null, 2));
    } catch (err) {
      console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t reminders.json:", err);
    }
  });
});
